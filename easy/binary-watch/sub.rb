# BACKTRACKING
# REVIEW https://leetcode.com/problems/binary-watch/discuss/238952/My-general-BacktrackingDFS-solution-in-Python-which-beats-100

def decode(bits)
  i = 0
  res = 0
  bits.reverse.each do |bit|
    i
    res
    bit
    res += (bit * (2**i))
    i += 1
  end
  res
end

def convert(leds)
  hours = leds[0..3]
  minutes = leds[4..9]


  hi = decode(hours)
  mi = decode(minutes)

  "#{hi}:#{mi >= 10 ? mi : '0'+mi.to_s}" if hi < 12 and mi < 60
end


def gen_array(combinations, constr, leds, places)
  if leds == places
    combinations << (constr + ([1] * leds))
    return
  elsif leds == 1
    a = Array.new(places) { 0 }
    a[0] = 1
    places.times do
      a.rotate!
      combinations << (constr + a)
    end
    return
  end

  gen_array(combinations, constr + [1], leds-1, places-1)
  gen_array(combinations, constr + [0], leds, places-1)
end

# @param {Integer} num
# @return {String[]}
def read_binary_watch(num)
  return ["0:00"] if num == 0
  combinations = []
  gen_array(combinations, [], num, 10)


  combinations.map { |el| convert(el) }.compact
end

read_binary_watch(0)
#convert([0,0,1,0,0,0,0,0,0,0])  # => "1:00"


convert([1,1,1,0])
decode([0,0,1,0])


(1 * (2**1)) + (1 * (2**0))



require 'set'
Set.new(["8:01","8:02","8:04","8:08","8:16","8:32","9:00","10:00","12:00","4:01","4:02","4:04","4:08","4:16","4:32","5:00","6:00","2:01","2:02","2:04","2:08","2:16","2:32","3:00","1:01","1:02","1:04","1:08","1:16","1:32","0:33","0:34","0:36","0:40","0:48","0:17","0:18","0:20","0:24","0:09","0:10","0:12","0:05","0:06","0:03"]) - Set.new(["0:03","0:05","0:06","0:09","0:10","0:12","0:17","0:18","0:20","0:24","0:33","0:34","0:36","0:40","0:48","1:01","1:02","1:04","1:08","1:16","1:32","2:01","2:02","2:04","2:08","2:16","2:32","3:00","4:01","4:02","4:04","4:08","4:16","4:32","5:00","6:00","8:01","8:02","8:04","8:08","8:16","8:32","9:00","10:00"])



mine = Set.new(["12:01","12:02","12:04","12:08","12:16","12:32","13:00","14:00","10:01","10:02","10:04","10:08","10:16","10:32","11:00","9:01","9:02","9:04","9:08","9:16","9:32","8:33","8:34","8:36","8:40","8:48","8:17","8:18","8:20","8:24","8:09","8:10","8:12","8:05","8:06","8:03","6:01","6:02","6:04","6:08","6:16","6:32","7:00","5:01","5:02","5:04","5:08","5:16","5:32","4:33","4:34","4:36","4:40","4:48","4:17","4:18","4:20","4:24","4:09","4:10","4:12","4:05","4:06","4:03","3:01","3:02","3:04","3:08","3:16","3:32","2:33","2:34","2:36","2:40","2:48","2:17","2:18","2:20","2:24","2:09","2:10","2:12","2:05","2:06","2:03","1:33","1:34","1:36","1:40","1:48","1:17","1:18","1:20","1:24","1:09","1:10","1:12","1:05","1:06","1:03","0:49","0:50","0:52","0:56","0:41","0:42","0:44","0:37","0:38","0:35","0:25","0:26","0:28","0:21","0:22","0:19","0:13","0:14","0:11","0:07"])

theirs = Set.new(["0:07","0:11","0:13","0:14","0:19","0:21","0:22","0:25","0:26","0:28","0:35","0:37","0:38","0:41","0:42","0:44","0:49","0:50","0:52","0:56","1:03","1:05","1:06","1:09","1:10","1:12","1:17","1:18","1:20","1:24","1:33","1:34","1:36","1:40","1:48","2:03","2:05","2:06","2:09","2:10","2:12","2:17","2:18","2:20","2:24","2:33","2:34","2:36","2:40","2:48","3:01","3:02","3:04","3:08","3:16","3:32","4:03","4:05","4:06","4:09","4:10","4:12","4:17","4:18","4:20","4:24","4:33","4:34","4:36","4:40","4:48","5:01","5:02","5:04","5:08","5:16","5:32","6:01","6:02","6:04","6:08","6:16","6:32","7:00","8:03","8:05","8:06","8:09","8:10","8:12","8:17","8:18","8:20","8:24","8:33","8:34","8:36","8:40","8:48","9:01","9:02","9:04","9:08","9:16","9:32","10:01","10:02","10:04","10:08","10:16","10:32","11:00"])

mine - theirs
mine.count - theirs.count

mine2 = read_binary_watch(3)
Set.new(mine2) - theirs


